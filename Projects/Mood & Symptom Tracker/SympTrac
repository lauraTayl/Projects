import tkinter as tk
from tkinter import messagebox

class SymptomTrackerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Symptom Tracker App")
        self.geometry("400x300")
        
        self.create_widgets()
    
    def create_widgets(self):
        # Symptom Entry Frame
        symptom_frame = tk.LabelFrame(self, text="Record Symptom")
        symptom_frame.pack(pady=10)
        
        symptom_label = tk.Label(symptom_frame, text="Symptom:")
        symptom_label.grid(row=0, column=0, padx=5, pady=5, sticky="e")
        
        self.symptom_entry = tk.Entry(symptom_frame)
        self.symptom_entry.grid(row=0, column=1, padx=5, pady=5)
        
        severity_label = tk.Label(symptom_frame, text="Severity:")
        severity_label.grid(row=1, column=0, padx=5, pady=5, sticky="e")
        
        self.severity_entry = tk.Entry(symptom_frame)
        self.severity_entry.grid(row=1, column=1, padx=5, pady=5)
        
        duration_label = tk.Label(symptom_frame, text="Duration:")
        duration_label.grid(row=2, column=0, padx=5, pady=5, sticky="e")
        
        self.duration_entry = tk.Entry(symptom_frame)
        self.duration_entry.grid(row=2, column=1, padx=5, pady=5)
        
        record_button = tk.Button(symptom_frame, text="Record", command=self.record_symptom)
        record_button.grid(row=3, column=0, columnspan=2, padx=5, pady=5)
        
        # Symptom List Frame
        self.symptom_listbox = tk.Listbox(self)
        self.symptom_listbox.pack(pady=10)
        
        clear_button = tk.Button(self, text="Clear List", command=self.clear_symptoms)
        clear_button.pack(pady=5)
    
    def record_symptom(self):
        symptom = self.symptom_entry.get()
        severity = self.severity_entry.get()
        duration = self.duration_entry.get()
        
        if symptom and severity and duration:
            self.symptom_listbox.insert(tk.END, f"Symptom: {symptom}, Severity: {severity}, Duration: {duration}")
            self.clear_entries()
            # Append the mood to a text file or a database
            with open('symptom_data.txt', 'a') as file:
                file.write(symptom, severity, duration + '\n')
            messagebox.showinfo('Success', 'Symptom recorded successfully!')
        else:
            messagebox.showwarning("Incomplete Form", "Please fill in all the fields.")
    
    def clear_entries(self):
        self.symptom_entry.delete(0, tk.END)
        self.severity_entry.delete(0, tk.END)
        self.duration_entry.delete(0, tk.END)
    
    def clear_symptoms(self):
        self.symptom_listbox.delete(0, tk.END)

if __name__ == "__main__":
    app = SymptomTrackerApp()
    app.mainloop()
